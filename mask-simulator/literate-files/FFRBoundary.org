#+title: FFR Boundary
#+property: header-args:octave :tangle ../FFRBoundary.m

* Class Overview
Represents the exterior boundaries of the FFR. Keeps track of how many photons have crossed the boundary. Exterior boundaries are: left, right, outer, inner. Store the count data and put it in a struct  when the user requests it.
* Properties
#+begin_src octave
classdef FFRBoundary < Boundary
  properties
    type % left, right, outer, or inner
  end
#+end_src
* Methods
** Constructor
#+begin_src octave
  methods
    function obj = FFRBoundary(bound, type)
      obj = obj@Boundary(bound);
      obj.type = type;
    end
#+end_src
** =addCrossing(photon, direction)=
Increment the following counts:
 - toInner or toOuter
#+begin_src octave
    function addCrossing(obj, photon, direction)
      yStep = photon.yStep;
      Debug.msg("Adding FFR bound crossing.", 1);
      if yStep < 0 % crossing outer -> inner
        obj.incrementToInner();
      else
        obj.incrementToOuter();
      end
    end
#+end_src
** =plot(axisHandle)=
#+begin_src octave
    function plot(obj, axisHandle)
      if isequal(obj.type, 'inner') || isequal(obj.type, 'outer')
        yline(axisHandle, obj.bound, Defaults.ffrBoundStyle, obj.bound, 'LineWidth', Defaults.ffrBoundWeight);
      else
        xline(axisHandle, obj.bound, Defaults.ffrBoundStyle, obj.bound, 'LineWidth', Defaults.ffrBoundWeight);
      end
    end
#+end_src
** =getCountData()=
#+begin_src octave
    function data = getCountData(obj)
      data = struct();
      data.count = obj.count;
      data.type = obj.type;
    end
#+end_src
** =printCrossingInfo()=
#+begin_src octave
    function printCrossingInfo(obj)
      msg = "\nFFRBound type: " + obj.type + "\n - total crossings: " + obj.count;
      Debug.msg(msg, 1);
    end
#+end_src
* Ends
#+begin_src octave
  end
end
#+end_src
